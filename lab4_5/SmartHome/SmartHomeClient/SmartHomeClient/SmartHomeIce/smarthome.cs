//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace SmartHomeIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public enum Mode
    {
        On,
        Standby
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public sealed class ModeHelper
    {
        public static void write(global::Ice.OutputStream ostr, Mode v)
        {
            ostr.writeEnum((int)v, 1);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static Mode read(global::Ice.InputStream istr)
        {
            Mode v;
            v = (Mode)istr.readEnum(1);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class ModeNotChangedError : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ModeNotChangedError()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ModeNotChangedError(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ModeNotChangedError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return "::SmartHomeIce::ModeNotChangedError";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHomeIce::ModeNotChangedError");
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            ModeNotChangedError o = other as ModeNotChangedError;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(ModeNotChangedError lhs, ModeNotChangedError rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(ModeNotChangedError lhs, ModeNotChangedError rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::SmartHomeIce::ModeNotChangedError", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InStandbyModeError : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public InStandbyModeError()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public InStandbyModeError(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public InStandbyModeError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return "::SmartHomeIce::InStandbyModeError";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHomeIce::InStandbyModeError");
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            InStandbyModeError o = other as InStandbyModeError;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(InStandbyModeError lhs, InStandbyModeError rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(InStandbyModeError lhs, InStandbyModeError rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::SmartHomeIce::InStandbyModeError", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface SmartDevice : global::Ice.Object, SmartDeviceOperations_
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CO2LevelSensor : global::Ice.Object, CO2LevelSensorOperations_, SmartDevice
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class TemperatureOutOfSupportedRangeError : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public TemperatureOutOfSupportedRangeError()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public TemperatureOutOfSupportedRangeError(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public TemperatureOutOfSupportedRangeError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return "::SmartHomeIce::TemperatureOutOfSupportedRangeError";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHomeIce::TemperatureOutOfSupportedRangeError");
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            TemperatureOutOfSupportedRangeError o = other as TemperatureOutOfSupportedRangeError;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(TemperatureOutOfSupportedRangeError lhs, TemperatureOutOfSupportedRangeError rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(TemperatureOutOfSupportedRangeError lhs, TemperatureOutOfSupportedRangeError rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::SmartHomeIce::TemperatureOutOfSupportedRangeError", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Fridge : global::Ice.Object, FridgeOperations_, SmartDevice
    {
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class NotEnoughIceCubesError : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public NotEnoughIceCubesError()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public NotEnoughIceCubesError(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public NotEnoughIceCubesError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return "::SmartHomeIce::NotEnoughIceCubesError";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHomeIce::NotEnoughIceCubesError");
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            NotEnoughIceCubesError o = other as NotEnoughIceCubesError;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(NotEnoughIceCubesError lhs, NotEnoughIceCubesError rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(NotEnoughIceCubesError lhs, NotEnoughIceCubesError rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::SmartHomeIce::NotEnoughIceCubesError", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FridgeWithIceCubeMaker : global::Ice.Object, FridgeWithIceCubeMakerOperations_, Fridge
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public enum Unit
    {
        Unspecified,
        Gram,
        Millilitre
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public sealed class UnitHelper
    {
        public static void write(global::Ice.OutputStream ostr, Unit v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static Unit read(global::Ice.InputStream istr)
        {
            Unit v;
            v = (Unit)istr.readEnum(2);
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class ShoppingListRecord : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public string name;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int quantity;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public Unit unit;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ShoppingListRecord()
        {
            this.name = "";
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ShoppingListRecord(string name, int quantity, Unit unit)
        {
            this.name = name;
            this.quantity = quantity;
            this.unit = unit;
            ice_initialize();
        }

        #endregion

        private const string _id = "::SmartHomeIce::ShoppingListRecord";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeString(name);
            ostr_.writeInt(quantity);
            ostr_.writeEnum((int)unit, 2);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            name = istr_.readString();
            quantity = istr_.readInt();
            unit = (Unit)istr_.readEnum(2);
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial class OrderedShoppingListRecord : global::Ice.Value
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public int id;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public ShoppingListRecord shoppingListRecord;

        #endregion

        partial void ice_initialize();

        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public OrderedShoppingListRecord()
        {
            ice_initialize();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public OrderedShoppingListRecord(int id, ShoppingListRecord shoppingListRecord)
        {
            this.id = id;
            this.shoppingListRecord = shoppingListRecord;
            ice_initialize();
        }

        #endregion

        private const string _id = "::SmartHomeIce::OrderedShoppingListRecord";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static new string ice_staticId()
        {
            return _id;
        }
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return _id;
        }

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice(ice_staticId(), -1, true);
            ostr_.writeInt(id);
            ostr_.writeValue(shoppingListRecord);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            id = istr_.readInt();
            istr_.readValue((ShoppingListRecord v) => { this.shoppingListRecord = v; });
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class IndexOutOfListRangeError : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public IndexOutOfListRangeError()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public IndexOutOfListRangeError(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public IndexOutOfListRangeError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override string ice_id()
        {
            return "::SmartHomeIce::IndexOutOfListRangeError";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::SmartHomeIce::IndexOutOfListRangeError");
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            IndexOutOfListRangeError o = other as IndexOutOfListRangeError;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator==(IndexOutOfListRangeError lhs, IndexOutOfListRangeError rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        public static bool operator!=(IndexOutOfListRangeError lhs, IndexOutOfListRangeError rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::SmartHomeIce::IndexOutOfListRangeError", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface FridgeWithShoppingList : global::Ice.Object, FridgeWithShoppingListOperations_, Fridge
    {
    }
}

namespace SmartHomeIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_SmartDevice_setMode(Mode ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_SmartDevice_getMode(Mode ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_SmartDevice_notifyIfInStandbyMode();

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_CO2LevelSensor_getCO2LevelInPPM(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_CO2LevelSensor_isCO2LevelSafe(bool ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Fridge_setTargetTemperature(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Fridge_getTargetTemperature(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_Fridge_getCurrentTemperature(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_FridgeWithIceCubeMaker_getIceCubesMakerCapacity(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_FridgeWithIceCubeMaker_getIceCubes(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_FridgeWithIceCubeMaker_getIceCubesCount(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_FridgeWithShoppingList_getShoppingList(OrderedShoppingListRecord[] ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_FridgeWithShoppingList_addShoppingListRecord(ShoppingListRecord ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public delegate void Callback_FridgeWithShoppingList_removeShoppingListRecord(ShoppingListRecord ret);
}

namespace SmartHomeIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface SmartDevicePrx : global::Ice.ObjectPrx
    {
        Mode setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Mode> setModeAsync(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        Mode end_setMode(global::Ice.AsyncResult asyncResult);

        Mode getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<Mode> getModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getMode(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        Mode end_getMode(global::Ice.AsyncResult asyncResult);

        void notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task notifyIfInStandbyModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        void end_notifyIfInStandbyMode(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface CO2LevelSensorPrx : SmartDevicePrx
    {
        int getCO2LevelInPPM(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> getCO2LevelInPPMAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CO2LevelSensor_getCO2LevelInPPM> begin_getCO2LevelInPPM(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getCO2LevelInPPM(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getCO2LevelInPPM(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_getCO2LevelInPPM(global::Ice.AsyncResult asyncResult);

        bool isCO2LevelSafe(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<bool> isCO2LevelSafeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_CO2LevelSensor_isCO2LevelSafe> begin_isCO2LevelSafe(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_isCO2LevelSafe(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_isCO2LevelSafe(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        bool end_isCO2LevelSafe(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface FridgePrx : SmartDevicePrx
    {
        float setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> setTargetTemperatureAsync(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Fridge_setTargetTemperature> begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_setTargetTemperature(global::Ice.AsyncResult asyncResult);

        float getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getTargetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Fridge_getTargetTemperature> begin_getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getTargetTemperature(global::Ice.AsyncResult asyncResult);

        float getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getCurrentTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_Fridge_getCurrentTemperature> begin_getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getCurrentTemperature(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface FridgeWithIceCubeMakerPrx : FridgePrx
    {
        int getIceCubesMakerCapacity(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> getIceCubesMakerCapacityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubesMakerCapacity> begin_getIceCubesMakerCapacity(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getIceCubesMakerCapacity(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getIceCubesMakerCapacity(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_getIceCubesMakerCapacity(global::Ice.AsyncResult asyncResult);

        int getIceCubes(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> getIceCubesAsync(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubes> begin_getIceCubes(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getIceCubes(int count, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getIceCubes(int count, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_getIceCubes(global::Ice.AsyncResult asyncResult);

        int getIceCubesCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> getIceCubesCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubesCount> begin_getIceCubesCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getIceCubesCount(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getIceCubesCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_getIceCubesCount(global::Ice.AsyncResult asyncResult);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface FridgeWithShoppingListPrx : FridgePrx
    {
        OrderedShoppingListRecord[] getShoppingList(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<OrderedShoppingListRecord[]> getShoppingListAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FridgeWithShoppingList_getShoppingList> begin_getShoppingList(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getShoppingList(global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getShoppingList(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        OrderedShoppingListRecord[] end_getShoppingList(global::Ice.AsyncResult asyncResult);

        ShoppingListRecord addShoppingListRecord(ShoppingListRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<ShoppingListRecord> addShoppingListRecordAsync(ShoppingListRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FridgeWithShoppingList_addShoppingListRecord> begin_addShoppingListRecord(ShoppingListRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_addShoppingListRecord(ShoppingListRecord record, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_addShoppingListRecord(ShoppingListRecord record, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        ShoppingListRecord end_addShoppingListRecord(global::Ice.AsyncResult asyncResult);

        ShoppingListRecord removeShoppingListRecord(int id, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<ShoppingListRecord> removeShoppingListRecordAsync(int id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_FridgeWithShoppingList_removeShoppingListRecord> begin_removeShoppingListRecord(int id, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_removeShoppingListRecord(int id, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_removeShoppingListRecord(int id, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        ShoppingListRecord end_removeShoppingListRecord(global::Ice.AsyncResult asyncResult);
    }
}

namespace SmartHomeIce
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface SmartDeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        Mode setMode(Mode mode, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        Mode getMode(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        void notifyIfInStandbyMode(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface CO2LevelSensorOperations_ : SmartDeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        int getCO2LevelInPPM(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        bool isCO2LevelSafe(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface FridgeOperations_ : SmartDeviceOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        float setTargetTemperature(float temperature, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        float getTargetTemperature(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        float getCurrentTemperature(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface FridgeWithIceCubeMakerOperations_ : FridgeOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        int getIceCubesMakerCapacity(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        int getIceCubes(int count, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        int getIceCubesCount(global::Ice.Current current = null);
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public interface FridgeWithShoppingListOperations_ : FridgeOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        OrderedShoppingListRecord[] getShoppingList(global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        ShoppingListRecord addShoppingListRecord(ShoppingListRecord record, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
        ShoppingListRecord removeShoppingListRecord(int id, global::Ice.Current current = null);
    }
}

namespace SmartHomeIce
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class SmartDevicePrxHelper : global::Ice.ObjectPrxHelperBase, SmartDevicePrx
    {
        public SmartDevicePrxHelper()
        {
        }

        public SmartDevicePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Mode setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setModeAsync(mode, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Mode getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_notifyIfInStandbyModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Mode> setModeAsync(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setModeAsync(mode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_setModeAsync(Mode iceP_mode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setMode_name = "setMode";

        private void _iceI_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _setMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_mode, 1);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ModeNotChangedError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Mode> getModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_getModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_getMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMode_name = "getMode";

        private void _iceI_getMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _getMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task notifyIfInStandbyModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_notifyIfInStandbyModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_notifyIfInStandbyModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _notifyIfInStandbyMode_name = "notifyIfInStandbyMode";

        private void _iceI_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _notifyIfInStandbyMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setMode(mode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, context, callback, cookie, false);
        }

        public Mode end_setMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_setMode, Mode>(
                (Callback_SmartDevice_setMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setMode_name, cookie, completedCallback);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(context, callback, cookie, false);
        }

        public Mode end_getMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_getMode, Mode>(
                (Callback_SmartDevice_getMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getMode_name, cookie, completedCallback);
            _iceI_getMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_notifyIfInStandbyMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(context, callback, cookie, false);
        }

        public void end_notifyIfInStandbyMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _notifyIfInStandbyMode_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_notifyIfInStandbyMode, object>(
                (Callback_SmartDevice_notifyIfInStandbyMode cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _notifyIfInStandbyMode_name, cookie, completedCallback);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static SmartDevicePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SmartDevicePrx r = b as SmartDevicePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                SmartDevicePrxHelper h = new SmartDevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartDevicePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            SmartDevicePrx r = b as SmartDevicePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                SmartDevicePrxHelper h = new SmartDevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartDevicePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    SmartDevicePrxHelper h = new SmartDevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SmartDevicePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    SmartDevicePrxHelper h = new SmartDevicePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static SmartDevicePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            SmartDevicePrx r = b as SmartDevicePrx;
            if(r == null)
            {
                SmartDevicePrxHelper h = new SmartDevicePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static SmartDevicePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            SmartDevicePrxHelper h = new SmartDevicePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::SmartDevice"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, SmartDevicePrx v)
        {
            ostr.writeProxy(v);
        }

        public static SmartDevicePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                SmartDevicePrxHelper result = new SmartDevicePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class CO2LevelSensorPrxHelper : global::Ice.ObjectPrxHelperBase, CO2LevelSensorPrx
    {
        public CO2LevelSensorPrxHelper()
        {
        }

        public CO2LevelSensorPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Mode setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setModeAsync(mode, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Mode getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_notifyIfInStandbyModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getCO2LevelInPPM(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getCO2LevelInPPMAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public bool isCO2LevelSafe(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_isCO2LevelSafeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Mode> setModeAsync(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setModeAsync(mode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_setModeAsync(Mode iceP_mode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setMode_name = "setMode";

        private void _iceI_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _setMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_mode, 1);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ModeNotChangedError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Mode> getModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_getModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_getMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMode_name = "getMode";

        private void _iceI_getMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _getMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task notifyIfInStandbyModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_notifyIfInStandbyModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_notifyIfInStandbyModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _notifyIfInStandbyMode_name = "notifyIfInStandbyMode";

        private void _iceI_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _notifyIfInStandbyMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<int> getCO2LevelInPPMAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getCO2LevelInPPMAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getCO2LevelInPPMAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getCO2LevelInPPM_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getCO2LevelInPPM(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getCO2LevelInPPM_name = "getCO2LevelInPPM";

        private void _iceI_getCO2LevelInPPM(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getCO2LevelInPPM_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<bool> isCO2LevelSafeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_isCO2LevelSafeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<bool> _iceI_isCO2LevelSafeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_isCO2LevelSafe_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<bool>(progress, cancel);
            _iceI_isCO2LevelSafe(context, synchronous, completed);
            return completed.Task;
        }

        private const string _isCO2LevelSafe_name = "isCO2LevelSafe";

        private void _iceI_isCO2LevelSafe(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<bool>(completed);
            outAsync.invoke(
                _isCO2LevelSafe_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    bool ret;
                    ret = istr.readBool();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setMode(mode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, context, callback, cookie, false);
        }

        public Mode end_setMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_setMode, Mode>(
                (Callback_SmartDevice_setMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setMode_name, cookie, completedCallback);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(context, callback, cookie, false);
        }

        public Mode end_getMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_getMode, Mode>(
                (Callback_SmartDevice_getMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getMode_name, cookie, completedCallback);
            _iceI_getMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_notifyIfInStandbyMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(context, callback, cookie, false);
        }

        public void end_notifyIfInStandbyMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _notifyIfInStandbyMode_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_notifyIfInStandbyMode, object>(
                (Callback_SmartDevice_notifyIfInStandbyMode cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _notifyIfInStandbyMode_name, cookie, completedCallback);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CO2LevelSensor_getCO2LevelInPPM> begin_getCO2LevelInPPM(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getCO2LevelInPPM(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getCO2LevelInPPM(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCO2LevelInPPM(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getCO2LevelInPPM(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCO2LevelInPPM(context, callback, cookie, false);
        }

        public int end_getCO2LevelInPPM(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCO2LevelInPPM_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CO2LevelSensor_getCO2LevelInPPM> begin_getCO2LevelInPPM(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getCO2LevelInPPM_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CO2LevelSensor_getCO2LevelInPPM, int>(
                (Callback_CO2LevelSensor_getCO2LevelInPPM cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getCO2LevelInPPM_name, cookie, completedCallback);
            _iceI_getCO2LevelInPPM(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_CO2LevelSensor_isCO2LevelSafe> begin_isCO2LevelSafe(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_isCO2LevelSafe(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_isCO2LevelSafe(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isCO2LevelSafe(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_isCO2LevelSafe(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_isCO2LevelSafe(context, callback, cookie, false);
        }

        public bool end_isCO2LevelSafe(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _isCO2LevelSafe_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<bool>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_CO2LevelSensor_isCO2LevelSafe> begin_isCO2LevelSafe(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_isCO2LevelSafe_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_CO2LevelSensor_isCO2LevelSafe, bool>(
                (Callback_CO2LevelSensor_isCO2LevelSafe cb, bool ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _isCO2LevelSafe_name, cookie, completedCallback);
            _iceI_isCO2LevelSafe(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CO2LevelSensorPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CO2LevelSensorPrx r = b as CO2LevelSensorPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CO2LevelSensorPrxHelper h = new CO2LevelSensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CO2LevelSensorPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CO2LevelSensorPrx r = b as CO2LevelSensorPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CO2LevelSensorPrxHelper h = new CO2LevelSensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CO2LevelSensorPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CO2LevelSensorPrxHelper h = new CO2LevelSensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CO2LevelSensorPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CO2LevelSensorPrxHelper h = new CO2LevelSensorPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CO2LevelSensorPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CO2LevelSensorPrx r = b as CO2LevelSensorPrx;
            if(r == null)
            {
                CO2LevelSensorPrxHelper h = new CO2LevelSensorPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CO2LevelSensorPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            CO2LevelSensorPrxHelper h = new CO2LevelSensorPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::CO2LevelSensor",
            "::SmartHomeIce::SmartDevice"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, CO2LevelSensorPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CO2LevelSensorPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CO2LevelSensorPrxHelper result = new CO2LevelSensorPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class FridgePrxHelper : global::Ice.ObjectPrxHelperBase, FridgePrx
    {
        public FridgePrxHelper()
        {
        }

        public FridgePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Mode setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setModeAsync(mode, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Mode getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_notifyIfInStandbyModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setTargetTemperatureAsync(temperature, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTargetTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getCurrentTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Mode> setModeAsync(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setModeAsync(mode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_setModeAsync(Mode iceP_mode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setMode_name = "setMode";

        private void _iceI_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _setMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_mode, 1);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ModeNotChangedError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Mode> getModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_getModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_getMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMode_name = "getMode";

        private void _iceI_getMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _getMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task notifyIfInStandbyModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_notifyIfInStandbyModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_notifyIfInStandbyModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _notifyIfInStandbyMode_name = "notifyIfInStandbyMode";

        private void _iceI_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _notifyIfInStandbyMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<float> setTargetTemperatureAsync(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setTargetTemperatureAsync(temperature, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_setTargetTemperatureAsync(float iceP_temperature, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setTargetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_setTargetTemperature(iceP_temperature, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setTargetTemperature_name = "setTargetTemperature";

        private void _iceI_setTargetTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _setTargetTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_temperature);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(TemperatureOutOfSupportedRangeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getTargetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTargetTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getTargetTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTargetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getTargetTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTargetTemperature_name = "getTargetTemperature";

        private void _iceI_getTargetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getTargetTemperature_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getCurrentTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getCurrentTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getCurrentTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getCurrentTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getCurrentTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getCurrentTemperature_name = "getCurrentTemperature";

        private void _iceI_getCurrentTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getCurrentTemperature_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setMode(mode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, context, callback, cookie, false);
        }

        public Mode end_setMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_setMode, Mode>(
                (Callback_SmartDevice_setMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setMode_name, cookie, completedCallback);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(context, callback, cookie, false);
        }

        public Mode end_getMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_getMode, Mode>(
                (Callback_SmartDevice_getMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getMode_name, cookie, completedCallback);
            _iceI_getMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_notifyIfInStandbyMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(context, callback, cookie, false);
        }

        public void end_notifyIfInStandbyMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _notifyIfInStandbyMode_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_notifyIfInStandbyMode, object>(
                (Callback_SmartDevice_notifyIfInStandbyMode cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _notifyIfInStandbyMode_name, cookie, completedCallback);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_setTargetTemperature> begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setTargetTemperature(temperature, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTargetTemperature(temperature, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTargetTemperature(temperature, context, callback, cookie, false);
        }

        public float end_setTargetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setTargetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_setTargetTemperature> begin_setTargetTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setTargetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_setTargetTemperature, float>(
                (Callback_Fridge_setTargetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setTargetTemperature_name, cookie, completedCallback);
            _iceI_setTargetTemperature(iceP_temperature, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_getTargetTemperature> begin_getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTargetTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTargetTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTargetTemperature(context, callback, cookie, false);
        }

        public float end_getTargetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTargetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_getTargetTemperature> begin_getTargetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTargetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_getTargetTemperature, float>(
                (Callback_Fridge_getTargetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTargetTemperature_name, cookie, completedCallback);
            _iceI_getTargetTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_getCurrentTemperature> begin_getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getCurrentTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCurrentTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCurrentTemperature(context, callback, cookie, false);
        }

        public float end_getCurrentTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCurrentTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_getCurrentTemperature> begin_getCurrentTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getCurrentTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_getCurrentTemperature, float>(
                (Callback_Fridge_getCurrentTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getCurrentTemperature_name, cookie, completedCallback);
            _iceI_getCurrentTemperature(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FridgePrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FridgePrx r = b as FridgePrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FridgePrxHelper h = new FridgePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FridgePrx r = b as FridgePrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FridgePrxHelper h = new FridgePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgePrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FridgePrxHelper h = new FridgePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FridgePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FridgePrxHelper h = new FridgePrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FridgePrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FridgePrx r = b as FridgePrx;
            if(r == null)
            {
                FridgePrxHelper h = new FridgePrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FridgePrxHelper h = new FridgePrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::Fridge",
            "::SmartHomeIce::SmartDevice"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FridgePrx v)
        {
            ostr.writeProxy(v);
        }

        public static FridgePrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FridgePrxHelper result = new FridgePrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class FridgeWithIceCubeMakerPrxHelper : global::Ice.ObjectPrxHelperBase, FridgeWithIceCubeMakerPrx
    {
        public FridgeWithIceCubeMakerPrxHelper()
        {
        }

        public FridgeWithIceCubeMakerPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Mode setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setModeAsync(mode, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Mode getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_notifyIfInStandbyModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setTargetTemperatureAsync(temperature, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTargetTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getCurrentTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getIceCubesMakerCapacity(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getIceCubesMakerCapacityAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getIceCubes(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getIceCubesAsync(count, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int getIceCubesCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getIceCubesCountAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Mode> setModeAsync(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setModeAsync(mode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_setModeAsync(Mode iceP_mode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setMode_name = "setMode";

        private void _iceI_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _setMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_mode, 1);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ModeNotChangedError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Mode> getModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_getModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_getMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMode_name = "getMode";

        private void _iceI_getMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _getMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task notifyIfInStandbyModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_notifyIfInStandbyModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_notifyIfInStandbyModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _notifyIfInStandbyMode_name = "notifyIfInStandbyMode";

        private void _iceI_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _notifyIfInStandbyMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<float> setTargetTemperatureAsync(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setTargetTemperatureAsync(temperature, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_setTargetTemperatureAsync(float iceP_temperature, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setTargetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_setTargetTemperature(iceP_temperature, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setTargetTemperature_name = "setTargetTemperature";

        private void _iceI_setTargetTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _setTargetTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_temperature);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(TemperatureOutOfSupportedRangeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getTargetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTargetTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getTargetTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTargetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getTargetTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTargetTemperature_name = "getTargetTemperature";

        private void _iceI_getTargetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getTargetTemperature_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getCurrentTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getCurrentTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getCurrentTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getCurrentTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getCurrentTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getCurrentTemperature_name = "getCurrentTemperature";

        private void _iceI_getCurrentTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getCurrentTemperature_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getIceCubesMakerCapacityAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getIceCubesMakerCapacityAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getIceCubesMakerCapacityAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getIceCubesMakerCapacity_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getIceCubesMakerCapacity(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getIceCubesMakerCapacity_name = "getIceCubesMakerCapacity";

        private void _iceI_getIceCubesMakerCapacity(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getIceCubesMakerCapacity_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getIceCubesAsync(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getIceCubesAsync(count, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getIceCubesAsync(int iceP_count, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getIceCubes_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getIceCubes(iceP_count, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getIceCubes_name = "getIceCubes";

        private void _iceI_getIceCubes(int iceP_count, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getIceCubes_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_count);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(NotEnoughIceCubesError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> getIceCubesCountAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getIceCubesCountAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_getIceCubesCountAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getIceCubesCount_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_getIceCubesCount(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getIceCubesCount_name = "getIceCubesCount";

        private void _iceI_getIceCubesCount(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _getIceCubesCount_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setMode(mode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, context, callback, cookie, false);
        }

        public Mode end_setMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_setMode, Mode>(
                (Callback_SmartDevice_setMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setMode_name, cookie, completedCallback);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(context, callback, cookie, false);
        }

        public Mode end_getMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_getMode, Mode>(
                (Callback_SmartDevice_getMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getMode_name, cookie, completedCallback);
            _iceI_getMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_notifyIfInStandbyMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(context, callback, cookie, false);
        }

        public void end_notifyIfInStandbyMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _notifyIfInStandbyMode_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_notifyIfInStandbyMode, object>(
                (Callback_SmartDevice_notifyIfInStandbyMode cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _notifyIfInStandbyMode_name, cookie, completedCallback);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_setTargetTemperature> begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setTargetTemperature(temperature, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTargetTemperature(temperature, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTargetTemperature(temperature, context, callback, cookie, false);
        }

        public float end_setTargetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setTargetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_setTargetTemperature> begin_setTargetTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setTargetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_setTargetTemperature, float>(
                (Callback_Fridge_setTargetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setTargetTemperature_name, cookie, completedCallback);
            _iceI_setTargetTemperature(iceP_temperature, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_getTargetTemperature> begin_getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTargetTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTargetTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTargetTemperature(context, callback, cookie, false);
        }

        public float end_getTargetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTargetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_getTargetTemperature> begin_getTargetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTargetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_getTargetTemperature, float>(
                (Callback_Fridge_getTargetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTargetTemperature_name, cookie, completedCallback);
            _iceI_getTargetTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_getCurrentTemperature> begin_getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getCurrentTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCurrentTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCurrentTemperature(context, callback, cookie, false);
        }

        public float end_getCurrentTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCurrentTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_getCurrentTemperature> begin_getCurrentTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getCurrentTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_getCurrentTemperature, float>(
                (Callback_Fridge_getCurrentTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getCurrentTemperature_name, cookie, completedCallback);
            _iceI_getCurrentTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubesMakerCapacity> begin_getIceCubesMakerCapacity(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getIceCubesMakerCapacity(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getIceCubesMakerCapacity(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIceCubesMakerCapacity(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getIceCubesMakerCapacity(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIceCubesMakerCapacity(context, callback, cookie, false);
        }

        public int end_getIceCubesMakerCapacity(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIceCubesMakerCapacity_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubesMakerCapacity> begin_getIceCubesMakerCapacity(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getIceCubesMakerCapacity_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FridgeWithIceCubeMaker_getIceCubesMakerCapacity, int>(
                (Callback_FridgeWithIceCubeMaker_getIceCubesMakerCapacity cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getIceCubesMakerCapacity_name, cookie, completedCallback);
            _iceI_getIceCubesMakerCapacity(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubes> begin_getIceCubes(int count, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getIceCubes(count, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getIceCubes(int count, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIceCubes(count, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getIceCubes(int count, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIceCubes(count, context, callback, cookie, false);
        }

        public int end_getIceCubes(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIceCubes_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubes> begin_getIceCubes(int iceP_count, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getIceCubes_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FridgeWithIceCubeMaker_getIceCubes, int>(
                (Callback_FridgeWithIceCubeMaker_getIceCubes cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getIceCubes_name, cookie, completedCallback);
            _iceI_getIceCubes(iceP_count, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubesCount> begin_getIceCubesCount(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getIceCubesCount(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getIceCubesCount(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIceCubesCount(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getIceCubesCount(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getIceCubesCount(context, callback, cookie, false);
        }

        public int end_getIceCubesCount(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getIceCubesCount_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FridgeWithIceCubeMaker_getIceCubesCount> begin_getIceCubesCount(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getIceCubesCount_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FridgeWithIceCubeMaker_getIceCubesCount, int>(
                (Callback_FridgeWithIceCubeMaker_getIceCubesCount cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getIceCubesCount_name, cookie, completedCallback);
            _iceI_getIceCubesCount(context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FridgeWithIceCubeMakerPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FridgeWithIceCubeMakerPrx r = b as FridgeWithIceCubeMakerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FridgeWithIceCubeMakerPrxHelper h = new FridgeWithIceCubeMakerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgeWithIceCubeMakerPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FridgeWithIceCubeMakerPrx r = b as FridgeWithIceCubeMakerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FridgeWithIceCubeMakerPrxHelper h = new FridgeWithIceCubeMakerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgeWithIceCubeMakerPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FridgeWithIceCubeMakerPrxHelper h = new FridgeWithIceCubeMakerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FridgeWithIceCubeMakerPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FridgeWithIceCubeMakerPrxHelper h = new FridgeWithIceCubeMakerPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FridgeWithIceCubeMakerPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FridgeWithIceCubeMakerPrx r = b as FridgeWithIceCubeMakerPrx;
            if(r == null)
            {
                FridgeWithIceCubeMakerPrxHelper h = new FridgeWithIceCubeMakerPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgeWithIceCubeMakerPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FridgeWithIceCubeMakerPrxHelper h = new FridgeWithIceCubeMakerPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::Fridge",
            "::SmartHomeIce::FridgeWithIceCubeMaker",
            "::SmartHomeIce::SmartDevice"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FridgeWithIceCubeMakerPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FridgeWithIceCubeMakerPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FridgeWithIceCubeMakerPrxHelper result = new FridgeWithIceCubeMakerPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public sealed class orderedShoppingListHelper
    {
        public static void write(global::Ice.OutputStream ostr, OrderedShoppingListRecord[] v)
        {
            if(v == null)
            {
                ostr.writeSize(0);
            }
            else
            {
                ostr.writeSize(v.Length);
                for(int ix = 0; ix < v.Length; ++ix)
                {
                    ostr.writeValue(v[ix]);
                }
            }
        }

        public static OrderedShoppingListRecord[] read(global::Ice.InputStream istr)
        {
            OrderedShoppingListRecord[] v;
            {
                int szx = istr.readAndCheckSeqSize(1);
                v = new OrderedShoppingListRecord[szx];
                for(int ix = 0; ix < szx; ++ix)
                {
                    istr.readValue(global::IceInternal.Patcher.arrayReadValue<OrderedShoppingListRecord>(v, ix));
                }
            }
            return v;
        }
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    [global::System.Serializable]
    public sealed class FridgeWithShoppingListPrxHelper : global::Ice.ObjectPrxHelperBase, FridgeWithShoppingListPrx
    {
        public FridgeWithShoppingListPrxHelper()
        {
        }

        public FridgeWithShoppingListPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public Mode setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setModeAsync(mode, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public Mode getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public void notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                _iceI_notifyIfInStandbyModeAsync(context, null, global::System.Threading.CancellationToken.None, true).Wait();
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_setTargetTemperatureAsync(temperature, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getTargetTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getCurrentTemperatureAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public OrderedShoppingListRecord[] getShoppingList(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getShoppingListAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ShoppingListRecord addShoppingListRecord(ShoppingListRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_addShoppingListRecordAsync(record, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public ShoppingListRecord removeShoppingListRecord(int id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_removeShoppingListRecordAsync(id, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<Mode> setModeAsync(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setModeAsync(mode, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_setModeAsync(Mode iceP_mode, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setMode_name = "setMode";

        private void _iceI_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _setMode_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeEnum((int)iceP_mode, 1);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(ModeNotChangedError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<Mode> getModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<Mode> _iceI_getModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<Mode>(progress, cancel);
            _iceI_getMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getMode_name = "getMode";

        private void _iceI_getMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<Mode>(completed);
            outAsync.invoke(
                _getMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    Mode ret;
                    ret = (Mode)istr.readEnum(1);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task notifyIfInStandbyModeAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_notifyIfInStandbyModeAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task _iceI_notifyIfInStandbyModeAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed.Task;
        }

        private const string _notifyIfInStandbyMode_name = "notifyIfInStandbyMode";

        private void _iceI_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _notifyIfInStandbyMode_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                });
        }

        public global::System.Threading.Tasks.Task<float> setTargetTemperatureAsync(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_setTargetTemperatureAsync(temperature, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_setTargetTemperatureAsync(float iceP_temperature, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_setTargetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_setTargetTemperature(iceP_temperature, context, synchronous, completed);
            return completed.Task;
        }

        private const string _setTargetTemperature_name = "setTargetTemperature";

        private void _iceI_setTargetTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _setTargetTemperature_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeFloat(iceP_temperature);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(TemperatureOutOfSupportedRangeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getTargetTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getTargetTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getTargetTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getTargetTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getTargetTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getTargetTemperature_name = "getTargetTemperature";

        private void _iceI_getTargetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getTargetTemperature_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getCurrentTemperatureAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getCurrentTemperatureAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getCurrentTemperatureAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getCurrentTemperature_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getCurrentTemperature(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getCurrentTemperature_name = "getCurrentTemperature";

        private void _iceI_getCurrentTemperature(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getCurrentTemperature_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<OrderedShoppingListRecord[]> getShoppingListAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getShoppingListAsync(context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<OrderedShoppingListRecord[]> _iceI_getShoppingListAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getShoppingList_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<OrderedShoppingListRecord[]>(progress, cancel);
            _iceI_getShoppingList(context, synchronous, completed);
            return completed.Task;
        }

        private const string _getShoppingList_name = "getShoppingList";

        private void _iceI_getShoppingList(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<OrderedShoppingListRecord[]>(completed);
            outAsync.invoke(
                _getShoppingList_name,
                global::Ice.OperationMode.Idempotent,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    OrderedShoppingListRecord[] ret;
                    ret = orderedShoppingListHelper.read(istr);
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ShoppingListRecord> addShoppingListRecordAsync(ShoppingListRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_addShoppingListRecordAsync(record, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ShoppingListRecord> _iceI_addShoppingListRecordAsync(ShoppingListRecord iceP_record, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_addShoppingListRecord_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ShoppingListRecord>(progress, cancel);
            _iceI_addShoppingListRecord(iceP_record, context, synchronous, completed);
            return completed.Task;
        }

        private const string _addShoppingListRecord_name = "addShoppingListRecord";

        private void _iceI_addShoppingListRecord(ShoppingListRecord iceP_record, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ShoppingListRecord>(completed);
            outAsync.invoke(
                _addShoppingListRecord_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeValue(iceP_record);
                    ostr.writePendingValues();
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    ShoppingListRecord ret = null;
                    istr.readValue((ShoppingListRecord v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<ShoppingListRecord> removeShoppingListRecordAsync(int id, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_removeShoppingListRecordAsync(id, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<ShoppingListRecord> _iceI_removeShoppingListRecordAsync(int iceP_id, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_removeShoppingListRecord_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<ShoppingListRecord>(progress, cancel);
            _iceI_removeShoppingListRecord(iceP_id, context, synchronous, completed);
            return completed.Task;
        }

        private const string _removeShoppingListRecord_name = "removeShoppingListRecord";

        private void _iceI_removeShoppingListRecord(int iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<ShoppingListRecord>(completed);
            outAsync.invoke(
                _removeShoppingListRecord_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeInt(iceP_id);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InStandbyModeError)
                    {
                        throw;
                    }
                    catch(IndexOutOfListRangeError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    ShoppingListRecord ret = null;
                    istr.readValue((ShoppingListRecord v) => {ret = v; });
                    istr.readPendingValues();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode mode, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setMode(mode, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setMode(Mode mode, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setMode(mode, context, callback, cookie, false);
        }

        public Mode end_setMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_setMode> begin_setMode(Mode iceP_mode, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_setMode, Mode>(
                (Callback_SmartDevice_setMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setMode_name, cookie, completedCallback);
            _iceI_setMode(iceP_mode, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getMode(context, callback, cookie, false);
        }

        public Mode end_getMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getMode_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<Mode>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_getMode> begin_getMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_getMode, Mode>(
                (Callback_SmartDevice_getMode cb, Mode ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getMode_name, cookie, completedCallback);
            _iceI_getMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_notifyIfInStandbyMode(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_notifyIfInStandbyMode(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_notifyIfInStandbyMode(context, callback, cookie, false);
        }

        public void end_notifyIfInStandbyMode(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _notifyIfInStandbyMode_name);
            ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_SmartDevice_notifyIfInStandbyMode> begin_notifyIfInStandbyMode(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_notifyIfInStandbyMode_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_SmartDevice_notifyIfInStandbyMode, object>(
                (Callback_SmartDevice_notifyIfInStandbyMode cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _notifyIfInStandbyMode_name, cookie, completedCallback);
            _iceI_notifyIfInStandbyMode(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_setTargetTemperature> begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_setTargetTemperature(temperature, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTargetTemperature(temperature, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_setTargetTemperature(float temperature, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_setTargetTemperature(temperature, context, callback, cookie, false);
        }

        public float end_setTargetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setTargetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_setTargetTemperature> begin_setTargetTemperature(float iceP_temperature, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_setTargetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_setTargetTemperature, float>(
                (Callback_Fridge_setTargetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _setTargetTemperature_name, cookie, completedCallback);
            _iceI_setTargetTemperature(iceP_temperature, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_getTargetTemperature> begin_getTargetTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getTargetTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTargetTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getTargetTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getTargetTemperature(context, callback, cookie, false);
        }

        public float end_getTargetTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getTargetTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_getTargetTemperature> begin_getTargetTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getTargetTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_getTargetTemperature, float>(
                (Callback_Fridge_getTargetTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getTargetTemperature_name, cookie, completedCallback);
            _iceI_getTargetTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_Fridge_getCurrentTemperature> begin_getCurrentTemperature(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getCurrentTemperature(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCurrentTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getCurrentTemperature(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getCurrentTemperature(context, callback, cookie, false);
        }

        public float end_getCurrentTemperature(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCurrentTemperature_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_Fridge_getCurrentTemperature> begin_getCurrentTemperature(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getCurrentTemperature_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_Fridge_getCurrentTemperature, float>(
                (Callback_Fridge_getCurrentTemperature cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getCurrentTemperature_name, cookie, completedCallback);
            _iceI_getCurrentTemperature(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FridgeWithShoppingList_getShoppingList> begin_getShoppingList(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getShoppingList(context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getShoppingList(global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getShoppingList(new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getShoppingList(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getShoppingList(context, callback, cookie, false);
        }

        public OrderedShoppingListRecord[] end_getShoppingList(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getShoppingList_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<OrderedShoppingListRecord[]>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FridgeWithShoppingList_getShoppingList> begin_getShoppingList(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getShoppingList_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FridgeWithShoppingList_getShoppingList, OrderedShoppingListRecord[]>(
                (Callback_FridgeWithShoppingList_getShoppingList cb, OrderedShoppingListRecord[] ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getShoppingList_name, cookie, completedCallback);
            _iceI_getShoppingList(context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FridgeWithShoppingList_addShoppingListRecord> begin_addShoppingListRecord(ShoppingListRecord record, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_addShoppingListRecord(record, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_addShoppingListRecord(ShoppingListRecord record, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addShoppingListRecord(record, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_addShoppingListRecord(ShoppingListRecord record, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_addShoppingListRecord(record, context, callback, cookie, false);
        }

        public ShoppingListRecord end_addShoppingListRecord(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _addShoppingListRecord_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<ShoppingListRecord>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FridgeWithShoppingList_addShoppingListRecord> begin_addShoppingListRecord(ShoppingListRecord iceP_record, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_addShoppingListRecord_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FridgeWithShoppingList_addShoppingListRecord, ShoppingListRecord>(
                (Callback_FridgeWithShoppingList_addShoppingListRecord cb, ShoppingListRecord ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _addShoppingListRecord_name, cookie, completedCallback);
            _iceI_addShoppingListRecord(iceP_record, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_FridgeWithShoppingList_removeShoppingListRecord> begin_removeShoppingListRecord(int id, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_removeShoppingListRecord(id, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_removeShoppingListRecord(int id, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeShoppingListRecord(id, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_removeShoppingListRecord(int id, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_removeShoppingListRecord(id, context, callback, cookie, false);
        }

        public ShoppingListRecord end_removeShoppingListRecord(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _removeShoppingListRecord_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<ShoppingListRecord>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_FridgeWithShoppingList_removeShoppingListRecord> begin_removeShoppingListRecord(int iceP_id, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_removeShoppingListRecord_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_FridgeWithShoppingList_removeShoppingListRecord, ShoppingListRecord>(
                (Callback_FridgeWithShoppingList_removeShoppingListRecord cb, ShoppingListRecord ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _removeShoppingListRecord_name, cookie, completedCallback);
            _iceI_removeShoppingListRecord(iceP_id, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static FridgeWithShoppingListPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FridgeWithShoppingListPrx r = b as FridgeWithShoppingListPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                FridgeWithShoppingListPrxHelper h = new FridgeWithShoppingListPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgeWithShoppingListPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            FridgeWithShoppingListPrx r = b as FridgeWithShoppingListPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                FridgeWithShoppingListPrxHelper h = new FridgeWithShoppingListPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgeWithShoppingListPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    FridgeWithShoppingListPrxHelper h = new FridgeWithShoppingListPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FridgeWithShoppingListPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    FridgeWithShoppingListPrxHelper h = new FridgeWithShoppingListPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static FridgeWithShoppingListPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            FridgeWithShoppingListPrx r = b as FridgeWithShoppingListPrx;
            if(r == null)
            {
                FridgeWithShoppingListPrxHelper h = new FridgeWithShoppingListPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static FridgeWithShoppingListPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            FridgeWithShoppingListPrxHelper h = new FridgeWithShoppingListPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::Fridge",
            "::SmartHomeIce::FridgeWithShoppingList",
            "::SmartHomeIce::SmartDevice"
        };

        public static string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, FridgeWithShoppingListPrx v)
        {
            ostr.writeProxy(v);
        }

        public static FridgeWithShoppingListPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                FridgeWithShoppingListPrxHelper result = new FridgeWithShoppingListPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace SmartHomeIce
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class SmartDeviceDisp_ : global::Ice.ObjectImpl, SmartDevice
    {
        #region Slice operations

        public abstract Mode setMode(Mode mode, global::Ice.Current current = null);

        public abstract Mode getMode(global::Ice.Current current = null);

        public abstract void notifyIfInStandbyMode(global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::SmartDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setMode(SmartDevice obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Mode iceP_mode;
            iceP_mode = (Mode)istr.readEnum(1);
            inS.endReadParams();
            var ret = obj.setMode(iceP_mode, current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 1);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getMode(SmartDevice obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getMode(current);
            var ostr = inS.startWriteParams();
            ostr.writeEnum((int)ret, 1);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_notifyIfInStandbyMode(SmartDevice obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            obj.notifyIfInStandbyMode(current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "getMode",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "notifyIfInStandbyMode",
            "setMode"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getMode(this, inS, current);
                }
                case 1:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 5:
                {
                    return iceD_notifyIfInStandbyMode(this, inS, current);
                }
                case 6:
                {
                    return iceD_setMode(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class CO2LevelSensorDisp_ : global::Ice.ObjectImpl, CO2LevelSensor
    {
        #region Slice operations

        public abstract int getCO2LevelInPPM(global::Ice.Current current = null);

        public abstract bool isCO2LevelSafe(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract Mode getMode(global::Ice.Current current = null);

        public abstract void notifyIfInStandbyMode(global::Ice.Current current = null);

        public abstract Mode setMode(Mode mode, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::CO2LevelSensor",
            "::SmartHomeIce::SmartDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getCO2LevelInPPM(CO2LevelSensor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getCO2LevelInPPM(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_isCO2LevelSafe(CO2LevelSensor obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.isCO2LevelSafe(current);
            var ostr = inS.startWriteParams();
            ostr.writeBool(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getCO2LevelInPPM",
            "getMode",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "isCO2LevelSafe",
            "notifyIfInStandbyMode",
            "setMode"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getCO2LevelInPPM(this, inS, current);
                }
                case 1:
                {
                    return SmartDeviceDisp_.iceD_getMode(this, inS, current);
                }
                case 2:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 6:
                {
                    return iceD_isCO2LevelSafe(this, inS, current);
                }
                case 7:
                {
                    return SmartDeviceDisp_.iceD_notifyIfInStandbyMode(this, inS, current);
                }
                case 8:
                {
                    return SmartDeviceDisp_.iceD_setMode(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class FridgeDisp_ : global::Ice.ObjectImpl, Fridge
    {
        #region Slice operations

        public abstract float setTargetTemperature(float temperature, global::Ice.Current current = null);

        public abstract float getTargetTemperature(global::Ice.Current current = null);

        public abstract float getCurrentTemperature(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract Mode getMode(global::Ice.Current current = null);

        public abstract void notifyIfInStandbyMode(global::Ice.Current current = null);

        public abstract Mode setMode(Mode mode, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::Fridge",
            "::SmartHomeIce::SmartDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_setTargetTemperature(Fridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            float iceP_temperature;
            iceP_temperature = istr.readFloat();
            inS.endReadParams();
            var ret = obj.setTargetTemperature(iceP_temperature, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getTargetTemperature(Fridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getTargetTemperature(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getCurrentTemperature(Fridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getCurrentTemperature(current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getCurrentTemperature",
            "getMode",
            "getTargetTemperature",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "notifyIfInStandbyMode",
            "setMode",
            "setTargetTemperature"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getCurrentTemperature(this, inS, current);
                }
                case 1:
                {
                    return SmartDeviceDisp_.iceD_getMode(this, inS, current);
                }
                case 2:
                {
                    return iceD_getTargetTemperature(this, inS, current);
                }
                case 3:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 4:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 7:
                {
                    return SmartDeviceDisp_.iceD_notifyIfInStandbyMode(this, inS, current);
                }
                case 8:
                {
                    return SmartDeviceDisp_.iceD_setMode(this, inS, current);
                }
                case 9:
                {
                    return iceD_setTargetTemperature(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class FridgeWithIceCubeMakerDisp_ : global::Ice.ObjectImpl, FridgeWithIceCubeMaker
    {
        #region Slice operations

        public abstract int getIceCubesMakerCapacity(global::Ice.Current current = null);

        public abstract int getIceCubes(int count, global::Ice.Current current = null);

        public abstract int getIceCubesCount(global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float getCurrentTemperature(global::Ice.Current current = null);

        public abstract float getTargetTemperature(global::Ice.Current current = null);

        public abstract float setTargetTemperature(float temperature, global::Ice.Current current = null);

        public abstract Mode getMode(global::Ice.Current current = null);

        public abstract void notifyIfInStandbyMode(global::Ice.Current current = null);

        public abstract Mode setMode(Mode mode, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::Fridge",
            "::SmartHomeIce::FridgeWithIceCubeMaker",
            "::SmartHomeIce::SmartDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getIceCubesMakerCapacity(FridgeWithIceCubeMaker obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getIceCubesMakerCapacity(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getIceCubes(FridgeWithIceCubeMaker obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_count;
            iceP_count = istr.readInt();
            inS.endReadParams();
            var ret = obj.getIceCubes(iceP_count, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getIceCubesCount(FridgeWithIceCubeMaker obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getIceCubesCount(current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getCurrentTemperature",
            "getIceCubes",
            "getIceCubesCount",
            "getIceCubesMakerCapacity",
            "getMode",
            "getTargetTemperature",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "notifyIfInStandbyMode",
            "setMode",
            "setTargetTemperature"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return FridgeDisp_.iceD_getCurrentTemperature(this, inS, current);
                }
                case 1:
                {
                    return iceD_getIceCubes(this, inS, current);
                }
                case 2:
                {
                    return iceD_getIceCubesCount(this, inS, current);
                }
                case 3:
                {
                    return iceD_getIceCubesMakerCapacity(this, inS, current);
                }
                case 4:
                {
                    return SmartDeviceDisp_.iceD_getMode(this, inS, current);
                }
                case 5:
                {
                    return FridgeDisp_.iceD_getTargetTemperature(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 10:
                {
                    return SmartDeviceDisp_.iceD_notifyIfInStandbyMode(this, inS, current);
                }
                case 11:
                {
                    return SmartDeviceDisp_.iceD_setMode(this, inS, current);
                }
                case 12:
                {
                    return FridgeDisp_.iceD_setTargetTemperature(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.9")]
    public abstract class FridgeWithShoppingListDisp_ : global::Ice.ObjectImpl, FridgeWithShoppingList
    {
        #region Slice operations

        public abstract OrderedShoppingListRecord[] getShoppingList(global::Ice.Current current = null);

        public abstract ShoppingListRecord addShoppingListRecord(ShoppingListRecord record, global::Ice.Current current = null);

        public abstract ShoppingListRecord removeShoppingListRecord(int id, global::Ice.Current current = null);

        #endregion

        #region Inherited Slice operations

        public abstract float getCurrentTemperature(global::Ice.Current current = null);

        public abstract float getTargetTemperature(global::Ice.Current current = null);

        public abstract float setTargetTemperature(float temperature, global::Ice.Current current = null);

        public abstract Mode getMode(global::Ice.Current current = null);

        public abstract void notifyIfInStandbyMode(global::Ice.Current current = null);

        public abstract Mode setMode(Mode mode, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::SmartHomeIce::Fridge",
            "::SmartHomeIce::FridgeWithShoppingList",
            "::SmartHomeIce::SmartDevice"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[2];
        }

        public static new string ice_staticId()
        {
            return _ids[2];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getShoppingList(FridgeWithShoppingList obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Idempotent, current.mode);
            inS.readEmptyParams();
            var ret = obj.getShoppingList(current);
            var ostr = inS.startWriteParams();
            orderedShoppingListHelper.write(ostr, ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_addShoppingListRecord(FridgeWithShoppingList obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            ShoppingListRecord iceP_record;
            iceP_record = null;
            istr.readValue((ShoppingListRecord v) => {iceP_record = v; });
            istr.readPendingValues();
            inS.endReadParams();
            var ret = obj.addShoppingListRecord(iceP_record, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_removeShoppingListRecord(FridgeWithShoppingList obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            int iceP_id;
            iceP_id = istr.readInt();
            inS.endReadParams();
            var ret = obj.removeShoppingListRecord(iceP_id, current);
            var ostr = inS.startWriteParams();
            ostr.writeValue(ret);
            ostr.writePendingValues();
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "addShoppingListRecord",
            "getCurrentTemperature",
            "getMode",
            "getShoppingList",
            "getTargetTemperature",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "notifyIfInStandbyMode",
            "removeShoppingListRecord",
            "setMode",
            "setTargetTemperature"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_addShoppingListRecord(this, inS, current);
                }
                case 1:
                {
                    return FridgeDisp_.iceD_getCurrentTemperature(this, inS, current);
                }
                case 2:
                {
                    return SmartDeviceDisp_.iceD_getMode(this, inS, current);
                }
                case 3:
                {
                    return iceD_getShoppingList(this, inS, current);
                }
                case 4:
                {
                    return FridgeDisp_.iceD_getTargetTemperature(this, inS, current);
                }
                case 5:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 6:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 7:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 9:
                {
                    return SmartDeviceDisp_.iceD_notifyIfInStandbyMode(this, inS, current);
                }
                case 10:
                {
                    return iceD_removeShoppingListRecord(this, inS, current);
                }
                case 11:
                {
                    return SmartDeviceDisp_.iceD_setMode(this, inS, current);
                }
                case 12:
                {
                    return FridgeDisp_.iceD_setTargetTemperature(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
